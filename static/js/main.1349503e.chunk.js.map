{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectedTodoId","setSelectedTodoId","className","map","todo","completed","title","id","classNames","type","onClick","TodoFilter","searchQuery","setSearchQuery","filter","setFilter","value","onChange","event","target","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","onClose","useState","user","setUser","isUserLoading","setIsUserLoading","useEffect","userId","finally","name","href","email","App","setTodos","completedFilter","setCompletedFilter","isTodoLoading","setIsTodoLoading","selectedTodo","useMemo","find","visibleTodos","preparedTitle","toLowerCase","trim","preparedQuery","filterByTitle","includes","unselectUser","useCallback","ReactDOM","render","document","getElementById"],"mappings":"yQAUaA,EAA4B,SAAC,GAAD,IACvCC,EADuC,EACvCA,MACAC,EAFuC,EAEvCA,eACAC,EAHuC,EAGvCA,kBAHuC,OAKvC,wBAAOC,UAAU,+BAAjB,UACE,gCACE,+BACE,mCACA,6BACE,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAU,qBAGjB,uCACA,wCAIJ,gCACGH,EAAMI,KAAI,SAAAC,GACT,IAAQC,EAAyBD,EAAzBC,UAAWC,EAAcF,EAAdE,MAAOC,EAAOH,EAAPG,GAE1B,OACE,qBACE,UAAQ,OACRL,UAAU,GAFZ,UAKE,oBAAIA,UAAU,eAAd,SAA8BK,IAC9B,oBAAIL,UAAU,eAAd,SACGG,GACC,sBAAMH,UAAU,OAAO,UAAQ,gBAA/B,SACE,mBAAGA,UAAU,qBAInB,oBAAIA,UAAU,2BAAd,SACE,mBAAGA,UAAWM,IAAW,CACvB,mBAAoBH,EACpB,mBAAoBA,IAFtB,SAKGC,MAGL,oBAAIJ,UAAU,8BAAd,SACE,wBACE,UAAQ,eACRA,UAAU,SACVO,KAAK,SACLC,QAAS,kBAAMT,EAAkBG,EAAKG,KAJxC,SAME,sBAAML,UAAU,OAAhB,SACE,mBAAGA,UAAWM,IAAW,MAAO,CAC9B,eAAgBJ,EAAKG,KAAOP,EAC5B,SAAUI,EAAKG,KAAOP,cA7BzBO,YC3BJI,EAAwB,SAAC,GAK/B,IAJLC,EAII,EAJJA,YACAC,EAGI,EAHJA,eACAC,EAEI,EAFJA,OACAC,EACI,EADJA,UAEA,OACE,uBAAMb,UAAU,mBAAhB,UACE,mBAAGA,UAAU,UAAb,SACE,sBAAMA,UAAU,SAAhB,SACE,yBACE,UAAQ,eACRc,MAAOF,EACPG,SAAU,SAAAC,GAAK,OAAIH,EAAUG,EAAMC,OAAOH,QAH5C,UAKE,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,YAAd,8BAKN,oBAAGd,UAAU,qDAAb,UACE,uBACE,UAAQ,cACRO,KAAK,OACLP,UAAU,QACVkB,YAAY,YACZJ,MAAOJ,EACPK,SAAU,SAACC,GAAD,OAAWL,EAAeK,EAAMC,OAAOH,UAGnD,sBAAMd,UAAU,eAAhB,SACE,mBAAGA,UAAU,8BAGdU,GAEG,sBAAMV,UAAU,gBAAgBmB,MAAO,CAAEC,cAAe,OAAxD,SAEE,wBACE,UAAQ,oBACRb,KAAK,SACLP,UAAU,SACVQ,QAAS,WACPG,EAAe,gBC3CjC,SAASU,EAAOC,GAEd,IARYC,EAQNC,EAVS,iEAUYF,EAAM,QAEjC,OAVYC,EAUA,IATL,IAAIE,SAAQ,SAAAC,GACjBC,WAAWD,EAASH,OASnBK,MAAK,kBAAMC,MAAML,MACjBI,MAAK,SAAAE,GAAG,OAAIA,EAAIC,U,MAGd,IClBMC,EAAmB,kBAC9B,qBAAKhC,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,uBCMNiC,EAA6B,SAAC,GAAuB,IAArB/B,EAAoB,EAApBA,KAAMgC,EAAc,EAAdA,QACjD,EAAwBC,mBAAsB,MAA9C,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0CF,oBAAS,GAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KAUA,OARAC,qBAAU,WFQW,IAACC,EEPpBF,GAAiB,IFOGE,EELZvC,EAAKuC,OFK0BpB,EAAG,iBAAiBoB,KEJxDb,KAAKS,GACLK,SAAQ,kBAAMH,GAAiB,QACjC,IAGD,sBAAKvC,UAAU,kBAAkB,UAAQ,QAAzC,UACE,qBAAKA,UAAU,qBAEdsC,EACC,cAAC,EAAD,IAEA,sBAAKtC,UAAU,aAAf,UACE,yBAAQA,UAAU,kBAAlB,UACE,sBACEA,UAAU,0CACV,UAAQ,eAFV,mBAKGE,EAAKG,MAIR,wBACEE,KAAK,SACLP,UAAU,SACV,UAAQ,cACRQ,QAAS,kBAAM0B,UAInB,sBAAKlC,UAAU,kBAAf,UACE,mBAAGA,UAAU,QAAQ,UAAQ,cAA7B,SACGE,EAAKE,QAGPkC,GAAiBF,EACd,cAAC,EAAD,IAEA,oBAAGpC,UAAU,QAAQ,UAAQ,aAA7B,UAEE,wBAAQA,UAAU,kBAAlB,gBAAqCoC,QAArC,IAAqCA,OAArC,EAAqCA,EAAMO,OAE1C,OAED,mBAAGC,KAAI,wBAAYR,QAAZ,IAAYA,OAAZ,EAAYA,EAAMS,OAAzB,gBACGT,QADH,IACGA,OADH,EACGA,EAAMS,qBCjDdC,G,MAAgB,WAC3B,MAA0BX,mBAAiB,IAA3C,mBAAOtC,EAAP,KAAckD,EAAd,KACA,EAA8CZ,mBAAS,OAAvD,mBAAOa,EAAP,KAAwBC,EAAxB,KACA,EAA0Cd,oBAAS,GAAnD,mBAAOe,EAAP,KAAsBC,EAAtB,KACA,EAAsChB,mBAAS,IAA/C,mBAAOzB,EAAP,KAAoBC,EAApB,KACA,EAA4CwB,mBAAS,GAArD,mBAAOrC,EAAP,KAAuBC,EAAvB,KAEAyC,qBAAU,WACRW,GAAiB,GHFS9B,EAAY,UGInCO,KAAKmB,GACLL,SAAQ,kBAAMS,GAAiB,QACjC,IAEH,IAAMC,EAAeC,mBAAQ,WAC3B,OAAOxD,EAAMyD,MAAK,SAACpD,GAAD,OAAUA,EAAKG,KAAOP,OACvC,CAACA,EAAgBD,IAEd0D,EAAeF,mBAAQ,WAC3B,OAAOxD,EAAMe,QAAO,SAACV,GACnB,IAAQE,EAAqBF,EAArBE,MAAOD,EAAcD,EAAdC,UACTqD,EAAgBpD,EAAMqD,cAAcC,OACpCC,EAAgBjD,EAAY+C,cAAcC,OAE1CE,EAAgBJ,EAAcK,SAASF,GAE7C,OAAQX,GACN,IAAK,SACH,OAAOY,IAAkBzD,EAG3B,IAAK,YACH,OAAOyD,GAAiBzD,EAI1B,QACE,OAAOyD,QAIZ,CAAClD,EAAasC,EAAiBnD,IAE5BiE,EAAeC,uBAAY,WAC/BhE,EAAkB,KACjB,IAEH,OACE,qCACE,qBAAKC,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,oBAEA,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,CACEU,YAAaA,EACbC,eAAgBA,EAChBC,OAAQoC,EACRnC,UAAWoC,MAIdC,EACG,cAAC,EAAD,IAEA,qBAAKlD,UAAU,QAAf,SACE,cAAC,EAAD,CACEH,MAAO0D,EACPzD,eAAgBA,EAChBC,kBAAmBA,aAShCqD,GACC,cAAC,EAAD,CACElD,KAAMkD,EACNlB,QAAS4B,SC9FnBE,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.1349503e.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  selectedTodoId: number;\n  setSelectedTodoId: (todoId: number) => void\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodoId,\n  setSelectedTodoId,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => {\n        const { completed, title, id } = todo;\n\n        return (\n          <tr\n            data-cy=\"todo\"\n            className=\"\"\n            key={id}\n          >\n            <td className=\"is-vcentered\">{id}</td>\n            <td className=\"is-vcentered\">\n              {completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p className={classNames({\n                'has-text-danger': !completed,\n                'has-text-success': completed,\n              })}\n              >\n                {title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => setSelectedTodoId(todo.id)}\n              >\n                <span className=\"icon\">\n                  <i className={classNames('far', {\n                    'fa-eye-slash': todo.id === selectedTodoId,\n                    'fa-eye': todo.id !== selectedTodoId,\n                  })}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        );\n      })}\n\n    </tbody>\n  </table>\n);\n","import { FC } from 'react';\n\ntype Props = {\n  searchQuery: string;\n  setSearchQuery: (searchQuery: string) => void;\n  filter: string\n  setFilter: (filter: string) => void\n\n};\n\nexport const TodoFilter: FC<Props> = ({\n  searchQuery,\n  setSearchQuery,\n  filter,\n  setFilter,\n}) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filter}\n            onChange={event => setFilter(event.target.value)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={searchQuery}\n          onChange={(event) => setSearchQuery(event.target.value)}\n\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {searchQuery\n          && (\n            <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n                onClick={() => {\n                  setSearchQuery('');\n                }}\n              />\n            </span>\n          )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  todo: Todo\n  onClose: () => void\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo, onClose }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isUserLoading, setIsUserLoading] = useState(false);\n\n  useEffect(() => {\n    setIsUserLoading(true);\n\n    getUser(todo.userId)\n      .then(setUser)\n      .finally(() => setIsUserLoading(false));\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isUserLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {todo.id}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => onClose()}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo.title}\n            </p>\n\n            {isUserLoading && user\n              ? <Loader />\n              : (\n                <p className=\"block\" data-cy=\"modal-user\">\n                  {/* <strong className=\"has-text-success\">Done</strong> */}\n                  <strong className=\"has-text-danger\">{user?.name}</strong>\n\n                  {' by '}\n\n                  <a href={`mailto:${user?.email}`}>\n                    {user?.email}\n                  </a>\n                </p>\n              )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport './App.scss';\nimport { getTodos } from './api';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [completedFilter, setCompletedFilter] = useState('all');\n  const [isTodoLoading, setIsTodoLoading] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedTodoId, setSelectedTodoId] = useState(0);\n\n  useEffect(() => {\n    setIsTodoLoading(true);\n    getTodos()\n      .then(setTodos)\n      .finally(() => setIsTodoLoading(false));\n  }, []);\n\n  const selectedTodo = useMemo(() => {\n    return todos.find((todo) => todo.id === selectedTodoId);\n  }, [selectedTodoId, todos]);\n\n  const visibleTodos = useMemo(() => {\n    return todos.filter((todo) => {\n      const { title, completed } = todo;\n      const preparedTitle = title.toLowerCase().trim();\n      const preparedQuery = searchQuery.toLowerCase().trim();\n\n      const filterByTitle = preparedTitle.includes(preparedQuery);\n\n      switch (completedFilter) {\n        case 'active':\n          return filterByTitle && !completed;\n\n          break;\n        case 'completed':\n          return filterByTitle && completed;\n          break;\n\n        case 'all':\n        default:\n          return filterByTitle;\n          break;\n      }\n    });\n  }, [searchQuery, completedFilter, todos]);\n\n  const unselectUser = useCallback(() => {\n    setSelectedTodoId(0);\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                searchQuery={searchQuery}\n                setSearchQuery={setSearchQuery}\n                filter={completedFilter}\n                setFilter={setCompletedFilter}\n              />\n            </div>\n\n            {isTodoLoading\n              ? <Loader />\n              : (\n                <div className=\"block\">\n                  <TodoList\n                    todos={visibleTodos}\n                    selectedTodoId={selectedTodoId}\n                    setSelectedTodoId={setSelectedTodoId}\n                  />\n                </div>\n              )}\n\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          todo={selectedTodo}\n          onClose={unselectUser}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}